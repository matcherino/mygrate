// Generated by CoffeeScript 1.7.1
(function() {
  var Async, Mysql, Path, Prompt, Utils, mysql;

  mysql = require("mysql");

  Utils = require("./utils");

  Path = require("path");

  Async = require("async");

  Prompt = require("prompt");

  Prompt.message = '';

  Mysql = (function() {
    function Mysql(config) {
      this.config = config;
    }

    Mysql.prototype.using = function(config, cb) {
      var client;
      if (arguments.length === 1) {
        cb = config;
        config = this.config;
      }
      client = mysql.createConnection(config);
      client.connect();
      return cb(null, client);
    };

    Mysql.prototype.exec = function(sql, cb) {
      return this.using(function(err, client) {
        if (err) {
          return cb(err);
        }
        return client.query(sql, function() {
          return cb.apply(null, Array.prototype.slice.apply(arguments));
        });
      });
    };

    Mysql.prototype.execFile = function(filename, cb) {
      var args, command, host, port;
      port = this.config.port || 3306;
      host = this.config.host || "localhost";
      command = "mysql";
      args = ["-u" + this.config.user, "-p" + this.config.password, "-D" + this.config.database, "-h" + host, "-P" + port, "-e", "source " + filename];
      return Utils.spawn(command, args, {
        cwd: Path.dirname(filename)
      }, cb);
    };

    Mysql.prototype.init = function(cb) {
      var sql;
      sql = "create table if not exists schema_migrations(\n  version varchar(128) not null primary key,\n  up text,\n  down text,\n  created_at timestamp default current_timestamp\n);";
      return this.exec(sql, cb);
    };

    Mysql.prototype.last = function(cb) {
      var sql;
      sql = "select *\nfrom schema_migrations\norder by version desc\nlimit 1;";
      return this.exec(sql, function(err, results) {
        if (err) {
          return cb(err);
        }
        return cb(null, results[0]);
      });
    };

    Mysql.prototype.all = function(cb) {
      var sql;
      sql = "select *\nfrom schema_migrations\norder by version desc;";
      return this.exec(sql, function(err, results) {
        if (err) {
          return cb(err);
        }
        return cb(null, results);
      });
    };

    Mysql.prototype.add = function(version, up, down, cb) {
      var sql;
      sql = "insert into schema_migrations(version, up, down)\nvalues(?, ?, ?)";
      return this.using(function(err, client) {
        return client.query(sql, [version, up, down], cb);
      });
    };

    Mysql.prototype.remove = function(version, cb) {
      var sql;
      sql = "delete from schema_migrations\nwhere version = ?";
      return this.using(function(err, client) {
        return client.query(sql, [version], function(err) {
          return cb(err);
        });
      });
    };

    Mysql.prototype.createDatabase = function() {
      var config, prompts, using;
      Prompt.start();
      config = this.config;
      using = this.using;
      prompts = [
        {
          name: 'user',
          description: 'root user',
          "default": 'root'
        }, {
          name: 'password',
          hidden: true
        }
      ];
      return Prompt.get(prompts, function(err, result) {
        var execRootSql, password, runScripts, statements, user;
        user = result.user, password = result.password;
        statements = ["flush privileges;", "drop database if exists " + config.database + ";", "create user '" + config.user + "'@'localhost' identified by '" + config.password + "';", "create database " + config.database + ";", "grant all privileges on " + config.database + ".* to '" + config.user + "'@'localhost';"];
        execRootSql = function(sql, cb) {
          var rootConfig;
          rootConfig = {
            user: user,
            password: password,
            host: config.host,
            port: config.port
          };
          return using(rootConfig, function(err, client) {
            return client.query(sql, cb);
          });
        };
        runScripts = function() {
          return Async.forEachSeries(statements, execRootSql, function(err) {
            if (err) {
              console.error(err);
              return process.exit(1);
            } else {
              console.log("Created\n\tdatabase: " + config.database + "\n\tuser: " + config.user + "\n\tpassword: " + config.password + "\n\thost: " + config.host + "\n\tport: " + config.port);
              console.log("OK");
              return process.exit(0);
            }
          });
        };
        return execRootSql("SELECT COUNT(*) AS k FROM mysql.user where User = '" + config.user + "';", function(err, result) {
          if (result[0].k > 0) {
            return execRootSql("DROP USER '" + config.user + "'@'localhost';", function(err, result) {
              return runScripts();
            });
          } else {
            return runScripts();
          }
        });
      });
    };

    return Mysql;

  })();

  module.exports = Mysql;

}).call(this);
