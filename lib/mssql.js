// Generated by CoffeeScript 1.7.1
(function() {
  var Async, Fs, Mssql, Path, Prompt, SqlServer, Utils, _;

  Path = require("path");

  Fs = require("fs");

  Utils = require("./utils");

  Async = require("async");

  Prompt = require("prompt");

  Prompt.message = '';

  SqlServer = require('dalicious/dalicious-mssql');

  _ = require('lodash');

  Async = require('async');

  Mssql = (function() {
    function Mssql(config) {
      this.config = config;
      if (this.config.server == null) {
        this.config.server = 'localhost';
      }
      if (this.config.port == null) {
        this.config.port = 1433;
      }
      this.UserDb = SqlServer.define(this.config);
    }

    Mssql.prototype.acquire = function() {
      return this.store != null ? this.store : this.store = new this.UserDb();
    };

    Mssql.prototype._exec = function(sql, args) {
      var store;
      store = this.acquire();
      return store.sql(sql, args);
    };

    Mssql.prototype.exec = function(sql, cb) {
      return this._exec(sql).exec(cb);
    };

    Mssql.prototype.logError = function(err) {
      var info;
      if (err.position) {
        info = errorToLineCol(script, err);
        console.error("" + (Path.basename(filename)) + " [" + info.line + ", " + info.column + "] " + info.message + "\n");
        return cb(err);
      }
    };

    Mssql.prototype.execFile = function(filename, cb) {
      var err, script, store;
      try {
        script = Fs.readFileSync(filename, 'utf8');
      } catch (_error) {
        err = _error;
        return cb(err);
      }
      store = this.acquire().transactable();
      return Async.series([
        function(cb) {
          return store.begin(cb);
        }, function(cb) {
          return store.sql(script).exec(cb);
        }
      ], function(err) {
        if (err) {
          console.error("ERRRRRRRRRRR", err);
          return store.rollback(function() {
            return cb(err);
          });
        } else {
          return store.commit(cb);
        }
      });
    };

    Mssql.prototype.console = function() {
      var port;
      throw new Error('Console is not implemented as it is not cross-platform');
      return port = this.config.port || 543;

      /*
      exports.up = (H) -> [
        H.createTableNX "schema_migrations(
          version varchar(256) not null primary key,
          up varchar(max),
          down varchar(max),
          created_at datetime default getdate()
        )
        """
      
        """select * from table"""
      ]
       */
    };

    Mssql.prototype.init = function(cb) {
      var sql;
      sql = "IF NOT EXISTS (SELECT *\n   FROM INFORMATION_SCHEMA.TABLES\n   WHERE TABLE_SCHEMA = 'dbo'\n   AND TABLE_NAME = 'schema_migrations')\nBEGIN\n  create table schema_migrations (\n    version varchar(256) not null primary key,\n    up varchar(max),\n    down varchar(max),\n    created_at datetime default getdate()\n  );\nEND";
      return this.exec(sql, cb);
    };

    Mssql.prototype.last = function(cb) {
      var sql;
      sql = "select top 1 *\nfrom schema_migrations\norder by version desc;";
      return this._exec(sql).one(cb);
    };

    Mssql.prototype.all = function(cb) {
      var sql;
      sql = "select *\nfrom schema_migrations\norder by version desc;";
      return this._exec(sql).all(function(err, rows) {
        var _ref;
        if ((err != null ? (_ref = err.message) != null ? _ref.indexOf('Invalid object name') : void 0 : void 0) >= 0) {
          return cb(null, []);
        }
        if (err) {
          return cb(err);
        }
        return cb(null, rows);
      });
    };

    Mssql.prototype.add = function(version, up, down, cb) {
      var sql;
      sql = "insert into schema_migrations(version, up, down)\nvalues($1, $2, $3)";
      return this._exec(sql, [version, up, down]).exec(cb);
    };

    Mssql.prototype.remove = function(version, cb) {
      var sql;
      sql = "delete from schema_migrations\nwhere version = $1";
      return this._exec(sql, [version]).exec(cb);
    };

    Mssql.prototype.createDatabase = function(defaultUser) {
      var config, sql;
      config = this.config;
      sql = "IF NOT EXISTS\n    (SELECT name\n     FROM master.sys.server_principals\n     WHERE name = '" + config.user + "')\nBEGIN\n    CREATE LOGIN [" + config.user + "] WITH PASSWORD = N'" + config.password + "'\nEND\nGO\n\nIF (EXISTS (\n  SELECT name\n  FROM master.dbo.sysdatabases\n  WHERE ('[' + name + ']' = '" + config.database + "'\n  OR name = '" + config.database + "')\n))\n  drop database [" + config.database + "];\nGO\n\ncreate database [" + config.database + "];\nGO\n\nUSE " + config.database + ";\nGO\nCREATE USER " + config.user + " FOR LOGIN " + config.user + ";\nexec sp_addrolemember 'db_owner', '" + config.user + "';\nGO";
      return this._execRoot(defaultUser, sql, function(err) {
        if (err) {
          console.error(err);
          console.error("Verify migrations/config.js has the correct host and port");
          return process.exit(1);
        } else {
          console.log("Created\n\tdatabase: " + config.database + "\n\tuser: " + config.user + "\n\tpassword: " + config.password + "\n\tserver: " + config.server + "\n\tport: " + config.port);
          console.log("OK");
          return process.exit(0);
        }
      });
    };

    Mssql.prototype._execRoot = function(defaultUser, sql, cb) {
      var config, prompts, self;
      Prompt.delimiter = "";
      Prompt.start();
      self = this;
      config = this.config;
      prompts = [
        {
          name: 'user',
          description: 'root user',
          "default": defaultUser
        }, {
          name: 'password',
          hidden: true
        }
      ];
      return Prompt.get(prompts, function(err, result) {
        var RootDb, host, password, port, rootConfig, store, user;
        user = result.user, password = result.password, host = result.host, port = result.port;
        if (password.trim().length === 0) {
          password = null;
        }
        rootConfig = _.defaults({
          user: user,
          password: password,
          database: null
        }, config);
        RootDb = SqlServer.define(rootConfig);
        store = new RootDb();
        return store.sql(sql).exec(cb);
      });
    };

    Mssql.prototype.dropDatabase = function(defaultUser) {
      var config, sql;
      config = this.config;
      sql = "IF (EXISTS (\n  SELECT name\n  FROM master.dbo.sysdatabases\n  WHERE ('[' + name + ']' = '" + config.database + "'\n  OR name = '" + config.database + "')\n))\n  drop database [" + config.database + "];\nGO\n\nIF EXISTS\n    (SELECT name\n     FROM master.sys.server_principals\n     WHERE name = '" + config.user + "')\nBEGIN\n    DROP LOGIN [" + config.user + "];\nEND";
      return this._execRoot(defaultUser, sql, function(err) {
        if (err) {
          console.error(err);
          return process.exit(1);
        } else {
          console.log("Dropped\n\tdatabase: " + config.database + "\n\tuser: " + config.user);
          console.log("OK");
          return process.exit(0);
        }
      });
    };

    return Mssql;

  })();

  module.exports = Mssql;

}).call(this);
