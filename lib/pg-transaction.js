// Generated by CoffeeScript 1.6.3
/*
From: https://github.com/goodybag/node-pg-transaction

Module dependencies
*/


(function() {
  var EventEmitter, Transaction, util;

  EventEmitter = require("events").EventEmitter;

  util = require("util");

  Transaction = module.exports = function(client) {
    this.client = client;
    return this;
  };

  util.inherits(Transaction, EventEmitter);

  /*
  Execute a query, re-emit the events that the client is receiving from this
  EventEmitter
  */


  Transaction.prototype.query = function() {
    var callback, query, self;
    self = this;
    query = this.client.query.apply(this.client, arguments);
    callback = query.callback;
    if (callback == null) {
      query.on("error", function(err) {
        self.emit("error", err);
      });
    }
    return query;
  };

  /*
  Start a transaction block
  @param  {String}   transaction mode [optional] mode of transaction
  @param  {Function} callback
  */


  Transaction.prototype.begin = function(mode, callback) {
    var begin;
    if (typeof mode === "function") {
      callback = mode;
      mode = null;
    }
    begin = "BEGIN";
    if (mode) {
      begin += " " + mode;
    }
    return this.query(begin, callback);
  };

  /*
  Define a new savepoint within the current transaction
  @param  {String}   savepoint name of the savepoint
  @param  {Function} callback
  */


  Transaction.prototype.savepoint = function(savepoint, callback) {
    return this.query("SAVEPOINT " + savepoint, callback);
  };

  /*
  Destroy a previously defined savepoint
  @param  {String}   savepoint name of the savepoint
  @param  {Function} callback
  */


  Transaction.prototype.release = function(savepoint, callback) {
    return this.query("RELEASE SAVEPOINT " + savepoint, callback);
  };

  /*
  Commit the current transaction
  @param  {Function} callback
  */


  Transaction.prototype.commit = function(callback) {
    var self;
    self = this;
    return this.query("COMMIT", function(err) {
      if (callback) {
        return callback(err);
      }
      if (err) {
        return self.emit("error", err);
      }
    });
  };

  /*
  Abort the current transaction or rollback to a previous savepoint
  @param  {String}   savepoint [optional] name of the savepoint to rollback to
  @param  {Function} callback
  */


  Transaction.prototype.rollback = function(savepoint, callback) {
    var query, self;
    self = this;
    if (typeof savepoint === "function") {
      savepoint = null;
      callback = savepoint;
    }
    query = ((savepoint != null) ? "ROLLBACK TO SAVEPOINT " + savepoint : "ROLLBACK");
    return this.query(query, function(err) {
      if (callback) {
        return callback(err);
      }
      if (err) {
        return self.emit("error", err);
      }
    });
  };

  /*
  Abort the current transaction
  @param  {Function} callback
  */


  Transaction.prototype.abort = function(callback) {
    var self;
    self = this;
    return this.query("ABORT TRANSACTION", function(err) {
      if (callback) {
        return callback(err);
      }
      if (err) {
        return self.emit("error", err);
      }
    });
  };

}).call(this);
